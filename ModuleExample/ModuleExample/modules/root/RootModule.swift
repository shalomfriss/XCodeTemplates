//
//  RootModule.swift
//  ModuleExample
//
//  Created by user on 4/21/19.
//  Copyright (c) 2019 Shalom Friss. All rights reserved.
//
//  This file was generated by the Cobra Generator
//

import UIKit


//Protocols
protocol RootModuleInterface {
    func navigate(to option: NavigationOptionProtocol, animated:Bool)
    func link(to option:String, animated:Bool)
    func deepNavigate(to option:NavigationPath, animated:Bool)
}

protocol RootInteractorInterface {
}

protocol RootPresenterInterface {
    func navigate(to option: NavigationOptionProtocol, animated:Bool)
    func link(to option:String, animated:Bool)
    func deepNavigate(to option:NavigationPath, animated:Bool)
}

protocol RootViewInterface:class {
}

enum RootNavigationOption:String, CaseIterable, NavigationOptionProtocol {
    case placeholder
    case Mod1
}

class RootModule: BaseModule {
    
    // MARK: - Private properties -
    
    private let _storyboard = UIStoryboard(name: "Root", bundle: nil)

    // MARK: - Module setup -
    
    init() {
        let identifier = String(describing: RootViewController.self)
        let moduleViewController =  _storyboard.instantiateViewController(withIdentifier: identifier) as! RootViewController

        super.init(viewController: moduleViewController)

        let interactor = RootInteractor()
        let presenter = RootPresenter(module: self, view: moduleViewController, interactor: interactor)
        moduleViewController.presenter = presenter
    }
    
}

// MARK: - Extensions -

extension RootModule: RootModuleInterface {
  func navigate(to option: NavigationOptionProtocol, animated:Bool = true) {
    let link = option as! RootNavigationOption
    switch link {
    case .Mod1:
        let mod = Mod1Module()
        //self.pushModule(mod)
        self.setRootModule(mod)
    default:
        break
    }
  }

  func link(to option:String, animated:Bool = true) {
      let routes = RootNavigationOption.allCases.map { "\($0)" }
      if(routes.contains(option)) {
        let route = RootNavigationOption(rawValue: option)!
        navigate(to: route, animated: animated)
      }
  }

  func deepNavigate(to option:NavigationPath, animated:Bool = true) {
      var path = option
      let route = path.links.removeFirst()
  }
}
