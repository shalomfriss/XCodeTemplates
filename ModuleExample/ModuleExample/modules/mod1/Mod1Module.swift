//
//  Mod1Module.swift
//  ModuleExample
//
//  Created by user on 4/21/19.
//  Copyright (c) 2019 Shalom Friss. All rights reserved.
//
//  This file was generated by the Cobra Generator
//

import UIKit


//Protocols
protocol Mod1ModuleInterface {
    func navigate(to option: NavigationOptionProtocol, animated:Bool)
    func link(to option:String, animated:Bool)
    func deepNavigate(to option:NavigationPath, animated:Bool)
}

protocol Mod1ModelInterface {
}

protocol Mod1ViewModelInterface {
    func navigate(to: NavigationOptionProtocol, animated:Bool)
}

protocol Mod1ViewInterface:class {
}

enum Mod1NavigationOption:String, CaseIterable, NavigationOptionProtocol {
  case placeholder
    case Submodule
}

class Mod1Module: BaseModule {

    // MARK: - Private properties -

    private let _storyboard = UIStoryboard(name: "Mod1", bundle: nil)

    // MARK: - Module setup -

    init() {
        let identifier = String(describing: Mod1ViewController.self)
        let moduleViewController =  _storyboard.instantiateViewController(withIdentifier: identifier) as! Mod1ViewController

        super.init(viewController: moduleViewController)

        let model = Mod1Model()
        let viewModel = Mod1ViewModel(module: self, view: moduleViewController, model: model)
        moduleViewController.viewModel = viewModel
    }

}

// MARK: - Extensions -

extension Mod1Module: Mod1ModuleInterface {

  func navigate(to option: NavigationOptionProtocol, animated:Bool = true) {
    let link = option as! Mod1NavigationOption
    switch link {
    case .Submodule:
        let submod = Sub1Module()
        self.pushModule(submod)
    default:
        break
    }
  }

  func link(to option:String, animated:Bool = true) {
      let routes = Mod1NavigationOption.allCases.map { "\($0)" }
      if(routes.contains(option)) {
        let route = Mod1NavigationOption(rawValue: option)!
        navigate(to: route, animated: animated)
      }
  }

  func deepNavigate(to option:NavigationPath, animated:Bool = true) {
      var path = option
      let route = path.links.removeFirst()
  }
}
